- name: deploy app to cloud
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - group_vars/env
  vars:
      ansible_host_key_checking: false
      ansible_python_interpreter: /usr/bin/python3

  tasks:
  - name: create VPC
    amazon.aws.ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ network }}"
      region: "{{ aws_region }}"
      state: present
      dns_hostnames: yes
      dns_support: yes
      multi_ok: no
      tags:
        Name: "{{ vpc_name }}"
    register: vpc

  - name: Add VPC definition to vars file
    ansible.builtin.lineinfile:
      path: group_vars/colman.env
      regexp: 'vpc_id: '
      line: 'vpc_id: {{ vpc.vpc.id }}'
      state: present
      create: True

  - name: associate subnet to the VPC
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      cidr: "{{ subnet_cidr }}"
      map_public: yes
      az: "{{ subnet }}"
      resource_tags:
        Name: "{{ vpc_name }}"
      wait: yes
    register: subnet

  - name: Add subnet definition to vars file
    ansible.builtin.lineinfile:
      path: group_vars/colman.env
      regexp: 'subnet_id: ' 
      line: 'subnet_id: {{ subnet.results[0].subnet.id }}'
      state: present
      create: True
  
  - name: create IGW
    amazon.aws.ec2_vpc_igw:
     vpc_id: "{{ vpc.vpc.id }}"
     region: "{{ aws_region }}"
     state: present
     tags:
       Name: "{{ vpc_name }}_igw"
    register: igw

  #- debug: var=igw

  - name: Add IGW definition to vars file
    ansible.builtin.lineinfile:
      path: group_vars/colman.env
      regexp: 'igw_id: '
      line: 'igw_id: {{ igw.gateway_id}}'
      state: present
      create: True

  - name: Route table for public Subnet
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      subnets:
        - "{{ subnet.result[0].subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id  }}"
      tags:
        Name: "{{ vpc_name }}_public_rt"


  - name: Create security group
    ec2_group:
      name: "{{ vpc_name }} VPC SG"
      description: "{{ vpc_name }} VPC SG"
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      rules:
        - proto: tcp
          ports:
          - 80
          - 22
          cidr_ip: 0.0.0.0/0
    register: sg


  - name: Create server
    amazon.aws.ec2_instance:
      image_id: "{{ aws_ubunto_ami }}"
      wait: yes
      instance_type: "{{ Server_type }}"
      region: "{{ aws_region }}"
      key_name: "{{ keypair }}"
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      volumes:
        - device_name: /dev/sda1
          ebs:
            volume_type: gp3
            volume_size: "{{ server_volume_size }}"
            delete_on_termination: true
      tags:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      exact_count: 1
      wait_timeout: 300
      vpc_subnet_id: "{{ subnet.results[0].subnet.id }}"
      security_group: "{{ sg.group_id }}"
      network:
        assign_public_ip: yes
      state: running
    register: server_ec2


  - name: get ip of instance
    amazon.aws.ec2_instance_info:
      filters:
        "tag:Name": "{{ server_name }}"
        instance-state-name: [ "running"]
    register: ec2_data

  - debug: var=ec2_data.instances[0].public_ip_address

  - name: Add server public IP to application host group
    add_host: hostname={{ ec2_data.instances[0].public_ip_address }} 
    # groups=app

  - name: Add Public IP definition to vars file
    ansible.builtin.lineinfile:
      path: group_vars/colman.env
      regexp: 'server_id: '
      line: 'server_id: {{ ec2_data.instances[0].instance_id }}'
      state: present
      create: True

  - name: Wait for SSH to start using external IP
    wait_for:
      host: "{{ ec2_data.instances[0].public_ip_address }}"
      port: 22
      timeout: 300
  
  - name: Pause for ubunto user access after boot
    ansible.builtin.pause:
      seconds: 30

  # ##############################################################
- name: Setup web server
  hosts: app
  user: ubuntu
  become: True
  gather_facts: False
  vars_files:
    - group_vars/env
  tasks:
    - name: add GPG key_name
      ansisible.builtin.shell: wget -q0 - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -


    - name: add docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present


    - name: install docker
      apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-builx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true


    -name : restart Docker service
      service:
        name: docker
        state: restarted
        enabled: yes

    - name : Copy file with owner and permission
      copy:
        src: ~/ssh/keypair
        dest: ~/ssh/keypair
        mode: 0600


    - name : Clone my app repo
      git:
        repo: git@github.com:chenamrani/DevOps-project.git 
        # dest: opt/app
        version: main
        key_file: ~/ssh/keypair
        accept_hostkey: yes
        force: yes


    - name : build docker image and push to DockerHab
      shell: "{{ item }}"
      args:
        chdir: /opt/app
      with_items:
        - docker login -u {{docker_user}} -p {{docker_token}}
        - docker build . --tag {{docker_user}}/pass_gen:latest 
        - docker push {{docker_user}}/pass_gen:latest


    - name : start docker app
      shell: docker compose up -d
      args:
        chdir: /opt/app

    - name: get the public IP of the server
      shell: curl idenr.me
      register: ip address
        

    - debug:
      msg:
        - "Dont forget to change the Host name in GitHub to {{ ip_address.stdout }}"
        - "your app is ready to use at http://{{ ip_address.stdout }}"


    # - name: install base packages
    #   apt: 
    #     name: 
    #       - git
    #       - nginx
    #     state: present

    # - name: restart nginx
    #   service:
    #     name: nginx
    #     state: restarted
    #     enabled: yes
